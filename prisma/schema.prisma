generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model products_categories {
  id       Int        @id @default(autoincrement())
  name     String
  desc     String?
  img_url  String?
  products products[]

  @@map("wp_products_category")
}

model products {
  id          Int                 @id @default(autoincrement())
  category_id Int
  title       String
  quantity    Int?
  content     String              @db.TinyText
  slug        String?             @db.VarChar(100)
  img_url     String?
  price       String
  currency    String?
  createdAt   DateTime            @default(now()) @map("created_at")
  Categories  products_categories @relation(fields: [category_id], references: [id])

  @@index([category_id])
  @@map("wp_products")
}

model orders {
  id           Int          @id @default(autoincrement())
  account_id   Int
  status       ORDER_STATUS @default(PROCESSING)
  provider     String?      @db.VarChar(100)
  currency     String
  total_amount String
  orderID      String
  payerID      String?
  paymentID    String?
  description  String
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @updatedAt @map("updated_at")

  @@map("wp_products_orders")
}

model account_ban_history {
  id         Int      @id @default(autoincrement())
  account_id Int      @db.UnsignedInt
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expired_at BigInt
  banned_by  Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_history_account_fk")
  players    players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_history_player_fk")

  @@index([account_id], map: "account_id")
  @@index([banned_by], map: "banned_by")
}

model account_bans {
  account_id Int      @id @db.UnsignedInt
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_account_fk")
  players    players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_player_fk")

  @@index([banned_by], map: "banned_by")
}

model account_sessions {
  id         String @id
  account_id Int    @db.UnsignedInt
  expires    BigInt @db.UnsignedBigInt
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account_vipgrouplist {
  account_id        Int               @db.UnsignedInt
  player_id         Int
  vipgroup_id       Int               @db.UnsignedInt
  players           players           @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_vipgrouplist_player_fk")
  account_vipgroups account_vipgroups @relation(fields: [vipgroup_id, account_id], references: [id, account_id], onDelete: Cascade, onUpdate: NoAction, map: "account_vipgrouplist_vipgroup_fk")

  @@unique([account_id, player_id, vipgroup_id], map: "account_vipgrouplist_unique")
  @@index([account_id], map: "account_id")
  @@index([vipgroup_id, account_id], map: "account_vipgrouplist_vipgroup_fk")
  @@index([player_id], map: "player_id")
  @@index([vipgroup_id], map: "vipgroup_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account_vipgroups {
  id                   Int                    @default(autoincrement()) @db.UnsignedInt
  account_id           Int                    @db.UnsignedInt
  name                 String                 @db.VarChar(128)
  customizable         Boolean                @default(true)
  account_vipgrouplist account_vipgrouplist[]

  @@id([id, account_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account_viplist {
  account_id  Int      @db.UnsignedInt
  player_id   Int
  description String   @default("") @db.VarChar(128)
  icon        Int      @default(0) @db.UnsignedTinyInt
  notify      Boolean  @default(false)
  accounts    accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_viplist_account_fk")
  players     players  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_viplist_player_fk")

  @@unique([account_id, player_id], map: "account_viplist_unique")
  @@index([account_id], map: "account_id")
  @@index([player_id], map: "player_id")
}

model accounts {
  id                     Int                      @id @default(autoincrement()) @db.UnsignedInt
  name                   String?                  @unique(map: "accounts_unique") @db.VarChar(32)
  password               String                   @db.Text
  email                  String                   @default("") @db.VarChar(255)
  created                Int                      @default(0)
  rlname                 String                   @default("") @db.VarChar(255)
  location               String                   @default("") @db.VarChar(255)
  country                String                   @default("") @db.VarChar(3)
  web_lastlogin          Int                      @default(0)
  web_flags              Int                      @default(0)
  email_hash             String                   @default("") @db.VarChar(32)
  email_new              String                   @default("") @db.VarChar(255)
  email_new_time         Int                      @default(0)
  email_code             String                   @default("") @db.VarChar(255)
  email_next             Int                      @default(0)
  email_verified         Boolean                  @default(false)
  phone                  String?                  @db.VarChar(15)
  key                    String                   @default("") @db.VarChar(64)
  premdays               Int                      @default(0)
  premdays_purchased     Int                      @default(0)
  lastday                Int                      @default(0) @db.UnsignedInt
  type                   Int                      @default(1) @db.UnsignedTinyInt
  coins                  Int                      @default(0) @db.UnsignedInt
  coins_transferable     Int                      @default(0) @db.UnsignedInt
  tournament_coins       Int                      @default(0) @db.UnsignedInt
  creation               Int                      @default(0) @db.UnsignedInt
  recruiter              Int?                     @default(0)
  vote                   Int                      @default(0)
  secret_status          Boolean                  @default(false)
  secret                 String?               @db.Char(16)
  gamesecret             String?               @db.Char(16) 
    authToken                String                @default("") @db.VarChar(100)
  account_ban_history    account_ban_history[]
  account_bans           account_bans?
  account_viplist        account_viplist[]
  coins_transactions     coins_transactions[]
  myaac_send_items       myaac_send_items[]
  pagseguro_transactions pagseguro_transactions[]
  players                players[]
  store_history          store_history[]
  tokens                 Tokens[]
}

model Tokens {
  id         Int       @id @default(autoincrement())
  token      String
  code       String
  expired_at DateTime
  created_at DateTime  @default(now())
  isValid    Boolean   @default(false)
  account_id Int?
  accounts   accounts? @relation(fields: [account_id], references: [id])

  @@index([account_id], map: "wp_tokens_account_id_fkey")
  @@map("wp_tokens")
}

model boosted_boss {
  boostname  String? @db.Text
  date       String  @id @default("") @db.VarChar(250)
  raceid     String  @default("") @db.VarChar(250)
  looktypeEx Int     @default(0)
  looktype   Int     @default(136)
  lookfeet   Int     @default(0)
  looklegs   Int     @default(0)
  lookhead   Int     @default(0)
  lookbody   Int     @default(0)
  lookaddons Int     @default(0)
  lookmount  Int?    @default(0)
}

model boosted_creature {
  boostname  String? @db.Text
  date       String  @id @default("") @db.VarChar(250)
  raceid     String  @default("") @db.VarChar(250)
  looktype   Int     @default(136)
  lookfeet   Int     @default(0)
  looklegs   Int     @default(0)
  lookhead   Int     @default(0)
  lookbody   Int     @default(0)
  lookaddons Int     @default(0)
  lookmount  Int?    @default(0)
}

model coins_transactions {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  account_id  Int       @db.UnsignedInt
  type        Int       @db.UnsignedTinyInt
  coin_type   Int       @default(1) @db.UnsignedTinyInt
  amount      Int       @db.UnsignedInt
  description String    @db.VarChar(3500)
  timestamp   DateTime? @default(now()) @db.Timestamp(0)
  accounts    accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "coins_transactions_account_fk")

  @@index([account_id], map: "account_id")
}

model daily_reward_history {
  id          Int     @id @default(autoincrement())
  daystreak   Int     @default(0) @db.SmallInt
  player_id   Int
  timestamp   Int
  description String? @db.VarChar(255)
  players     players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "daily_reward_history_player_fk")

  @@index([player_id], map: "player_id")
}

model forge_history {
  id           Int       @id @default(autoincrement())
  player_id    Int
  action_type  Int       @default(0)
  description  String    @db.Text
  is_success   Int       @default(0) @db.TinyInt
  bonus        Int       @default(0) @db.TinyInt
  done_at      BigInt
  done_at_date DateTime? @default(now()) @db.DateTime(0)
  cost         BigInt    @default(0) @db.UnsignedBigInt
  gained       BigInt    @default(0) @db.UnsignedBigInt
  players      players   @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "forge_history_ibfk_1")

  @@index([player_id], map: "player_id")
}

model global_storage {
  key   String @unique(map: "global_storage_unique") @db.VarChar(32)
  value String @db.Text
}

model guild_invites {
  player_id Int     @default(0)
  guild_id  Int     @default(0)
  date      Int
  guilds    guilds  @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_invites_guild_fk")
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_invites_player_fk")

  @@id([player_id, guild_id])
  @@index([guild_id], map: "guild_id")
}

model guild_membership {
  player_id   Int         @id
  guild_id    Int
  rank_id     Int
  nick        String      @default("") @db.VarChar(15)
  guilds      guilds      @relation(fields: [guild_id], references: [id], onDelete: Cascade, map: "guild_membership_guild_fk")
  players     players     @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "guild_membership_player_fk")
  guild_ranks guild_ranks @relation(fields: [rank_id], references: [id], onDelete: Cascade, map: "guild_membership_rank_fk")

  @@index([guild_id], map: "guild_id")
  @@index([rank_id], map: "rank_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model guild_ranks {
  id               Int                @id @default(autoincrement())
  guild_id         Int
  name             String             @db.VarChar(255)
  level            Int
  guild_membership guild_membership[]
  guilds           guilds             @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guild_ranks_fk")

  @@index([guild_id], map: "guild_id")
}

model guild_wars {
  id             Int              @id @default(autoincrement())
  guild1         Int              @default(0)
  guild2         Int              @default(0)
  name1          String           @db.VarChar(255)
  name2          String           @db.VarChar(255)
  status         Int              @default(0) @db.UnsignedTinyInt
  started        BigInt           @default(0)
  ended          BigInt           @default(0)
  frags_limit    Int              @default(0) @db.UnsignedSmallInt
  payment        BigInt           @default(0) @db.UnsignedBigInt
  duration_days  Int              @default(0) @db.UnsignedTinyInt
  guildwar_kills guildwar_kills[]

  @@index([guild1], map: "guild1")
  @@index([guild2], map: "guild2")
}

model guilds {
  id               Int                @id @default(autoincrement())
  level            Int                @default(1)
  name             String             @unique(map: "guilds_name_unique") @db.VarChar(255)
  ownerid          Int                @unique(map: "guilds_owner_unique")
  creationdata     Int
  motd             String             @default("") @db.VarChar(255)
  residence        Int                @default(0)
  balance          BigInt             @default(0) @db.UnsignedBigInt
  points           Int                @default(0)
  description      String             @db.Text
  logo_name        String             @default("default.gif") @db.VarChar(255)
  guild_invites    guild_invites[]
  guild_membership guild_membership[]
  guild_ranks      guild_ranks[]
  players          players            @relation(fields: [ownerid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guilds_ownerid_fk")
}

model guildwar_kills {
  id          Int        @id @default(autoincrement())
  killer      String     @db.VarChar(50)
  target      String     @db.VarChar(50)
  killerguild Int        @default(0)
  targetguild Int        @default(0)
  warid       Int        @default(0)
  time        BigInt
  guild_wars  guild_wars @relation(fields: [warid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "guildwar_kills_warid_fk")

  @@index([warid], map: "warid")
}

model house_lists {
  house_id Int
  listid   Int
  version  BigInt @default(0)
  list     String @db.Text
  houses   houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "houses_list_house_fk")

  @@id([house_id, listid])
  @@index([house_id], map: "house_id_index")
  @@index([version], map: "version")
}

model houses {
  id             Int           @id @default(autoincrement())
  owner          Int
  new_owner      Int           @default(-1)
  paid           Int           @default(0) @db.UnsignedInt
  warnings       Int           @default(0)
  name           String        @db.VarChar(255)
  rent           Int           @default(0)
  town_id        Int           @default(0)
  bid            Int           @default(0)
  bid_end        Int           @default(0)
  last_bid       Int           @default(0)
  highest_bidder Int           @default(0)
  size           Int           @default(0)
  guildid        Int?
  beds           Int           @default(0)
  house_lists    house_lists[]
  tile_store     tile_store[]

  @@index([owner], map: "owner")
  @@index([town_id], map: "town_id")
}

model ip_bans {
  ip         Int     @id
  reason     String  @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  players    players @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "ip_bans_players_fk")

  @@index([banned_by], map: "banned_by")
}

model kv_store {
  key_name  String @id
  timestamp BigInt
  value     Bytes
}

model market_history {
  id         Int     @id @default(autoincrement())
  player_id  Int
  sale       Boolean @default(false)
  itemtype   Int     @db.UnsignedInt
  amount     Int     @db.UnsignedSmallInt
  price      BigInt  @default(0) @db.UnsignedBigInt
  expires_at BigInt  @db.UnsignedBigInt
  inserted   BigInt  @db.UnsignedBigInt
  state      Int     @db.UnsignedTinyInt
  tier       Int     @default(0) @db.UnsignedTinyInt
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "market_history_players_fk")

  @@index([player_id, sale], map: "player_id")
}

model market_offers {
  id        Int     @id @default(autoincrement())
  player_id Int
  sale      Boolean @default(false)
  itemtype  Int     @db.UnsignedInt
  amount    Int     @db.UnsignedSmallInt
  created   BigInt  @db.UnsignedBigInt
  anonymous Boolean @default(false)
  price     BigInt  @default(0) @db.UnsignedBigInt
  tier      Int     @default(0) @db.UnsignedTinyInt
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "market_offers_players_fk")

  @@index([created], map: "created")
  @@index([player_id], map: "player_id")
  @@index([sale, itemtype], map: "sale")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model myaac_account_actions {
  account_id Int
  ip         String @default("0.0.0.0") @db.VarChar(16)
  ipv6       Bytes  @default(dbgenerated("0x30")) @db.Binary(16)
  date       Int    @default(0)
  action     String @default("") @db.VarChar(255)
  id         Int    @id @default(autoincrement())

  @@index([account_id], map: "account_id")
}

model myaac_admin_menu {
  id       Int    @id @default(autoincrement())
  name     String @default("") @db.VarChar(255)
  page     String @default("") @db.VarChar(255)
  ordering Int    @default(0)
  flags    Int    @default(0)
  enabled  Int    @default(1)
}

model myaac_bugtracker {
  account String @db.VarChar(255)
  type    Int    @default(0)
  status  Int    @default(0)
  text    String @db.Text
  id      Int    @default(0)
  subject String @default("") @db.VarChar(255)
  reply   Int    @default(0)
  who     Int    @default(0)
  uid     Int    @id @default(autoincrement())
  tag     Int    @default(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_changelog {
  id        Int     @id @default(autoincrement())
  body      String  @default("") @db.VarChar(500)
  type      Boolean @default(false)
  where     Boolean @default(false)
  date      Int     @default(0)
  player_id Int     @default(0)
  hidden    Boolean @default(false)
}

model myaac_charbazaar {
  id          Int      @id @default(autoincrement())
  account_old Int
  account_new Int
  player_id   Int
  price       Int
  date_end    DateTime @db.DateTime(0)
  date_start  DateTime @db.DateTime(0)
  bid_account Int
  bid_price   Int
  status      Int
}

model myaac_charbazaar_bid {
  id         Int      @id @default(autoincrement())
  account_id Int
  auction_id Int
  bid        Int
  date       DateTime @default(now()) @db.Timestamp(0)
}

model myaac_config {
  id    Int    @id @default(autoincrement())
  name  String @unique(map: "name") @db.VarChar(30)
  value String @db.VarChar(1000)
}

model myaac_faq {
  id       Int     @id @default(autoincrement())
  question String  @default("") @db.VarChar(255)
  answer   String  @default("") @db.VarChar(1020)
  ordering Int     @default(0)
  hidden   Boolean @default(false)
}

model myaac_forum {
  id            Int     @id @default(autoincrement())
  first_post    Int     @default(0)
  last_post     Int     @default(0)
  section       Int     @default(0)
  replies       Int     @default(0)
  views         Int     @default(0)
  author_aid    Int     @default(0)
  author_guid   Int     @default(0)
  post_text     String  @db.Text
  post_topic    String  @default("") @db.VarChar(255)
  post_smile    Boolean @default(false)
  post_html     Boolean @default(false)
  post_date     Int     @default(0)
  last_edit_aid Int     @default(0)
  edit_date     Int     @default(0)
  post_ip       String  @default("0.0.0.0") @db.VarChar(32)
  sticked       Boolean @default(false)
  closed        Boolean @default(false)

  @@index([section], map: "section")
}

model myaac_forum_boards {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(32)
  description String  @default("") @db.VarChar(255)
  ordering    Int     @default(0)
  guild       Int     @default(0)
  access      Int     @default(0)
  closed      Boolean @default(false)
  hidden      Boolean @default(false)
}

model myaac_gallery {
  id       Int     @id @default(autoincrement())
  comment  String  @default("") @db.VarChar(255)
  image    String  @db.VarChar(255)
  thumb    String  @db.VarChar(255)
  author   String  @default("") @db.VarChar(50)
  ordering Int     @default(0)
  hidden   Boolean @default(false)
}

model myaac_menu {
  id       Int     @id @default(autoincrement())
  template String  @db.VarChar(255)
  name     String  @db.VarChar(255)
  link     String  @db.VarChar(255)
  blank    Boolean @default(false)
  color    String  @default("") @db.VarChar(6)
  category Int     @default(1)
  ordering Int     @default(0)
  enabled  Int     @default(1)
}

model myaac_monsters {
  id               Int     @id @default(autoincrement())
  hidden           Boolean @default(false)
  name             String  @db.VarChar(255)
  mana             Int     @default(0)
  exp              Int
  health           Int
  speed_lvl        Int     @default(1)
  use_haste        Boolean
  voices           String  @db.Text
  immunities       String  @db.VarChar(255)
  elements         String  @db.Text
  summonable       Boolean
  convinceable     Boolean
  pushable         Boolean @default(false)
  canpushitems     Boolean @default(false)
  canwalkonenergy  Boolean @default(false)
  canwalkonpoison  Boolean @default(false)
  canwalkonfire    Boolean @default(false)
  runonhealth      Boolean @default(false)
  hostile          Boolean @default(false)
  attackable       Boolean @default(false)
  rewardboss       Boolean @default(false)
  defense          Int     @default(0)
  armor            Int     @default(0)
  canpushcreatures Boolean @default(false)
  race             String  @db.VarChar(255)
  loot             String  @db.Text
  summons          String  @db.Text
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_news {
  id                 Int     @id @default(autoincrement())
  title              String  @db.VarChar(100)
  body               String  @db.Text
  type               Boolean @default(false)
  date               Int     @default(0)
  category           Boolean @default(false)
  player_id          Int     @default(0)
  last_modified_by   Int     @default(0)
  last_modified_date Int     @default(0)
  comments           String  @default("") @db.VarChar(50)
  article_text       String  @default("") @db.VarChar(300)
  article_image      String  @default("") @db.VarChar(100)
  hidden             Boolean @default(false)
}

model myaac_news_categories {
  id          Int     @id @default(autoincrement())
  name        String  @default("") @db.VarChar(50)
  description String  @default("") @db.VarChar(50)
  icon_id     Int     @default(0)
  hidden      Boolean @default(false)
}

model myaac_notepad {
  id         Int    @id @default(autoincrement())
  account_id Int
  content    String @db.Text
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_pages {
  id             Int     @id @default(autoincrement())
  name           String  @unique(map: "name") @db.VarChar(30)
  title          String  @db.VarChar(30)
  body           String  @db.LongText
  date           Int     @default(0)
  player_id      Int     @default(0)
  php            Boolean @default(false)
  enable_tinymce Boolean @default(true)
  access         Int     @default(0) @db.TinyInt
  hidden         Boolean @default(false)
}

model myaac_polls {
  id          Int    @id
  question    String @db.VarChar(255)
  description String @db.VarChar(255)
  end         Int
  start       Int
  answers     Int
  votes_all   Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model myaac_polls_answers {
  poll_id   Int
  answer_id Int
  answer    String @db.VarChar(255)
  votes     Int
  id        Int    @id @default(autoincrement())
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_send_items {
  id               Int       @id @default(autoincrement())
  transaction_code String    @db.VarChar(50)
  item_id          String    @db.VarChar(20)
  item_name        String    @db.VarChar(50)
  item_count       Int       @default(1) @db.UnsignedInt
  account_id       Int       @db.UnsignedInt
  payment_method   String    @db.VarChar(50)
  payment_status   String    @db.VarChar(50)
  status           String    @default("0") @db.Char(1)
  request          String?   @db.LongText
  created_at       DateTime  @db.DateTime(0)
  updated_at       DateTime? @db.DateTime(0)
  accounts         accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "myaac_send_items_account_fk")

  @@unique([transaction_code, payment_status], map: "transaction_code")
  @@index([account_id], map: "myaac_send_items_account_fk")
  @@index([payment_method], map: "payment_method")
  @@index([payment_status], map: "payment_status")
  @@index([status], map: "status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_spells {
  id            Int     @id @default(autoincrement())
  spell         String  @default("") @db.VarChar(255)
  name          String  @unique(map: "name") @db.VarChar(255)
  words         String  @default("") @db.VarChar(255)
  category      Boolean @default(false)
  type          Boolean @default(false)
  level         Int     @default(0)
  maglevel      Int     @default(0)
  mana          Int     @default(0)
  soul          Int     @default(0) @db.TinyInt
  conjure_id    Int     @default(0)
  conjure_count Int     @default(0) @db.TinyInt
  reagent       Int     @default(0)
  item_id       Int     @default(0)
  premium       Boolean @default(false)
  vocations     String  @default("") @db.VarChar(100)
  hidden        Boolean @default(false)
}

model myaac_videos {
  id         Int     @id @default(autoincrement())
  title      String  @default("") @db.VarChar(100)
  youtube_id String  @db.VarChar(20)
  author     String  @default("") @db.VarChar(50)
  ordering   Int     @default(0)
  hidden     Boolean @default(false)
}

model myaac_visitors {
  ip        String @unique(map: "ip") @db.VarChar(45)
  lastvisit Int    @default(0)
  page      String @db.VarChar(2048)
}

model myaac_weapons {
  id        Int    @id
  level     Int    @default(0)
  maglevel  Int    @default(0)
  vocations String @default("") @db.VarChar(100)
}

model pagseguro_transactions {
  id               Int       @id @default(autoincrement())
  transaction_code String    @db.VarChar(50)
  account_id       Int       @db.UnsignedInt
  payment_method   String    @db.VarChar(50)
  payment_status   String    @db.VarChar(50)
  code             String    @db.VarChar(10)
  coins_amount     Int
  bought           Int?
  delivered        String    @default("0") @db.Char(1)
  in_double        String    @default("0") @db.Char(1)
  request          String?   @db.LongText
  created_at       DateTime  @db.DateTime(0)
  updated_at       DateTime? @db.DateTime(0)
  accounts         accounts  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pagseguro_transactions_account_fk")

  @@unique([transaction_code, payment_status], map: "transaction_code")
  @@index([coins_amount], map: "coins_amount")
  @@index([delivered], map: "delivered")
  @@index([account_id], map: "pagseguro_transactions_account_fk")
  @@index([payment_method], map: "payment_method")
  @@index([payment_status], map: "payment_status")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_bosstiary {
  player_id     Int
  bossIdSlotOne Int   @default(0)
  bossIdSlotTwo Int   @default(0)
  removeTimes   Int   @default(1)
  tracker       Bytes @db.Blob
  id            Int   @id @default(autoincrement())
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_charms {
  player_guid      Int
  charm_points     String?  @db.VarChar(250)
  charm_expansion  Boolean?
  rune_wound       Int?
  rune_enflame     Int?
  rune_poison      Int?
  rune_freeze      Int?
  rune_zap         Int?
  rune_curse       Int?
  rune_cripple     Int?
  rune_parry       Int?
  rune_dodge       Int?
  rune_adrenaline  Int?
  rune_numb        Int?
  rune_cleanse     Int?
  rune_bless       Int?
  rune_scavenge    Int?
  rune_gut         Int?
  rune_low_blow    Int?
  rune_divine      Int?
  rune_vamp        Int?
  rune_void        Int?
  UsedRunesBit     String?  @db.VarChar(250)
  UnlockedRunesBit String?  @db.VarChar(250)
  tracker_list     Bytes?   @map("tracker list") @db.Blob
  id               Int      @id @default(autoincrement())
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_deaths {
  player_id              Int
  time                   BigInt  @default(0) @db.UnsignedBigInt
  level                  Int     @default(1)
  killed_by              String  @db.VarChar(255)
  is_player              Boolean @default(true)
  mostdamage_by          String  @db.VarChar(100)
  mostdamage_is_player   Boolean @default(false)
  unjustified            Boolean @default(false)
  mostdamage_unjustified Boolean @default(false)
  id                     Int     @id @default(autoincrement())
  players                players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_deaths_players_fk")

  @@index([killed_by], map: "killed_by")
  @@index([mostdamage_by], map: "mostdamage_by")
  @@index([player_id], map: "player_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model player_depotitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_depotitems_players_fk")

  @@unique([player_id, sid], map: "player_depotitems_unique")
}

model player_hirelings {
  id        Int     @id @default(autoincrement())
  player_id Int
  name      String? @db.VarChar(255)
  active    Int     @default(0) @db.UnsignedTinyInt
  sex       Int     @default(0) @db.UnsignedTinyInt
  posx      Int     @default(0)
  posy      Int     @default(0)
  posz      Int     @default(0)
  lookbody  Int     @default(0)
  lookfeet  Int     @default(0)
  lookhead  Int     @default(0)
  looklegs  Int     @default(0)
  looktype  Int     @default(136)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_hirelings_ibfk_1")

  @@index([player_id], map: "player_id")
}

model player_inboxitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_inboxitems_players_fk")

  @@unique([player_id, sid], map: "player_inboxitems_unique")
}

model player_items {
  player_id  Int     @default(0)
  pid        Int     @default(0)
  sid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_items_players_fk")

  @@id([player_id, pid, sid])
  @@index([player_id], map: "player_id")
  @@index([sid], map: "sid")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_kills {
  player_id Int
  time      BigInt  @default(0) @db.UnsignedBigInt
  target    Int
  unavenged Boolean @default(false)
  id        Int     @id @default(autoincrement())
}

model player_namelocks {
  player_id                                       Int     @unique(map: "player_namelocks_unique")
  reason                                          String  @db.VarChar(255)
  namelocked_at                                   BigInt
  namelocked_by                                   Int
  players_player_namelocks_namelocked_byToplayers players @relation("player_namelocks_namelocked_byToplayers", fields: [namelocked_by], references: [id], onDelete: Cascade, map: "player_namelocks_players2_fk")
  players_player_namelocks_player_idToplayers     players @relation("player_namelocks_player_idToplayers", fields: [player_id], references: [id], onDelete: Cascade, map: "player_namelocks_players_fk")

  @@index([namelocked_by], map: "namelocked_by")
}

model player_prey {
  player_id        Int
  slot             Boolean
  state            Boolean
  raceid           String  @db.VarChar(250)
  option           Boolean
  bonus_type       Boolean
  bonus_rarity     Boolean
  bonus_percentage String  @db.VarChar(250)
  bonus_time       String  @db.VarChar(250)
  free_reroll      BigInt
  monster_list     Bytes?  @db.Blob

  @@id([player_id, slot])
}

model player_rewards {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @default(0)
  count      Int     @default(0)
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_rewards_players_fk")

  @@unique([player_id, sid], map: "player_rewards_unique")
}

model player_spells {
  player_id Int
  name      String  @db.VarChar(255)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_spells_players_fk")

  @@id([player_id, name])
  @@index([player_id], map: "player_id")
}

model player_stash {
  player_id  Int
  item_id    Int
  item_count Int

  @@id([player_id, item_id])
}

model player_storage {
  player_id Int     @default(0)
  key       Int     @default(0) @db.UnsignedInt
  value     Int     @default(0)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_storage_players_fk")

  @@id([player_id, key])
}

model player_taskhunt {
  player_id     Int
  slot          Boolean
  state         Boolean
  raceid        String  @db.VarChar(250)
  upgrade       Boolean
  rarity        Boolean
  kills         String  @db.VarChar(250)
  disabled_time BigInt
  free_reroll   BigInt
  monster_list  Bytes?  @db.Blob

  @@id([player_id, slot])
}

model player_wheeldata {
  player_id Int     @id
  slot      Bytes   @db.Blob
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "player_wheeldata_players_fk")

  @@index([player_id], map: "player_id")
}

model players {
  id                                                       Int                    @id @default(autoincrement())
  name                                                     String                 @unique(map: "players_unique") @db.VarChar(255)
  group_id                                                 Int                    @default(1)
  account_id                                               Int                    @default(0) @db.UnsignedInt
  level                                                    Int                    @default(1)
  vocation                                                 Int                    @default(0)
  health                                                   Int                    @default(150)
  healthmax                                                Int                    @default(150)
  experience                                               BigInt                 @default(0)
  lookbody                                                 Int                    @default(0)
  lookfeet                                                 Int                    @default(0)
  lookhead                                                 Int                    @default(0)
  looklegs                                                 Int                    @default(0)
  looktype                                                 Int                    @default(136)
  lookaddons                                               Int                    @default(0)
  maglevel                                                 Int                    @default(0)
  mana                                                     Int                    @default(0)
  manamax                                                  Int                    @default(0)
  manaspent                                                BigInt                 @default(0) @db.UnsignedBigInt
  soul                                                     Int                    @default(0) @db.UnsignedInt
  town_id                                                  Int                    @default(1)
  posx                                                     Int                    @default(0)
  posy                                                     Int                    @default(0)
  posz                                                     Int                    @default(0)
  conditions                                               Bytes                  @db.MediumBlob
  cap                                                      Int                    @default(0)
  sex                                                      Int                    @default(0)
  pronoun                                                  Int                    @default(0)
  lastlogin                                                BigInt                 @default(0) @db.UnsignedBigInt
  lastip                                                   Int                    @default(0) @db.UnsignedInt
  save                                                     Boolean                @default(true)
  skull                                                    Boolean                @default(false)
  skulltime                                                BigInt                 @default(0)
  lastlogout                                               BigInt                 @default(0) @db.UnsignedBigInt
  blessings                                                Int                    @default(0) @db.TinyInt
  blessings1                                               Int                    @default(0) @db.TinyInt
  blessings2                                               Int                    @default(0) @db.TinyInt
  blessings3                                               Int                    @default(0) @db.TinyInt
  blessings4                                               Int                    @default(0) @db.TinyInt
  blessings5                                               Int                    @default(0) @db.TinyInt
  blessings6                                               Int                    @default(0) @db.TinyInt
  blessings7                                               Int                    @default(0) @db.TinyInt
  blessings8                                               Int                    @default(0) @db.TinyInt
  onlinetime                                               Int                    @default(0)
  deletion                                                 BigInt                 @default(0)
  balance                                                  BigInt                 @default(0) @db.UnsignedBigInt
  offlinetraining_time                                     Int                    @default(43200) @db.UnsignedSmallInt
  offlinetraining_skill                                    Int                    @default(-1) @db.TinyInt
  stamina                                                  Int                    @default(2520) @db.UnsignedSmallInt
  skill_fist                                               Int                    @default(10) @db.UnsignedInt
  skill_fist_tries                                         BigInt                 @default(0) @db.UnsignedBigInt
  skill_club                                               Int                    @default(10) @db.UnsignedInt
  skill_club_tries                                         BigInt                 @default(0) @db.UnsignedBigInt
  skill_sword                                              Int                    @default(10) @db.UnsignedInt
  skill_sword_tries                                        BigInt                 @default(0) @db.UnsignedBigInt
  skill_axe                                                Int                    @default(10) @db.UnsignedInt
  skill_axe_tries                                          BigInt                 @default(0) @db.UnsignedBigInt
  skill_dist                                               Int                    @default(10) @db.UnsignedInt
  skill_dist_tries                                         BigInt                 @default(0) @db.UnsignedBigInt
  skill_shielding                                          Int                    @default(10) @db.UnsignedInt
  skill_shielding_tries                                    BigInt                 @default(0) @db.UnsignedBigInt
  skill_fishing                                            Int                    @default(10) @db.UnsignedInt
  skill_fishing_tries                                      BigInt                 @default(0) @db.UnsignedBigInt
  skill_critical_hit_chance                                Int                    @default(0) @db.UnsignedInt
  skill_critical_hit_chance_tries                          BigInt                 @default(0) @db.UnsignedBigInt
  skill_critical_hit_damage                                Int                    @default(0) @db.UnsignedInt
  skill_critical_hit_damage_tries                          BigInt                 @default(0) @db.UnsignedBigInt
  skill_life_leech_chance                                  Int                    @default(0) @db.UnsignedInt
  skill_life_leech_chance_tries                            BigInt                 @default(0) @db.UnsignedBigInt
  skill_life_leech_amount                                  Int                    @default(0) @db.UnsignedInt
  skill_life_leech_amount_tries                            BigInt                 @default(0) @db.UnsignedBigInt
  skill_mana_leech_chance                                  Int                    @default(0) @db.UnsignedInt
  skill_mana_leech_chance_tries                            BigInt                 @default(0) @db.UnsignedBigInt
  skill_mana_leech_amount                                  Int                    @default(0) @db.UnsignedInt
  skill_mana_leech_amount_tries                            BigInt                 @default(0) @db.UnsignedBigInt
  skill_criticalhit_chance                                 BigInt                 @default(0) @db.UnsignedBigInt
  skill_criticalhit_damage                                 BigInt                 @default(0) @db.UnsignedBigInt
  skill_lifeleech_chance                                   BigInt                 @default(0) @db.UnsignedBigInt
  skill_lifeleech_amount                                   BigInt                 @default(0) @db.UnsignedBigInt
  skill_manaleech_chance                                   BigInt                 @default(0) @db.UnsignedBigInt
  skill_manaleech_amount                                   BigInt                 @default(0) @db.UnsignedBigInt
  manashield                                               Int                    @default(0) @db.UnsignedInt
  max_manashield                                           Int                    @default(0) @db.UnsignedInt
  xpboost_stamina                                          Int?                   @db.UnsignedSmallInt
  xpboost_value                                            Int?                   @db.UnsignedTinyInt
  marriage_status                                          BigInt                 @default(0) @db.UnsignedBigInt
  marriage_spouse                                          Int                    @default(-1)
  bonus_rerolls                                            BigInt                 @default(0)
  prey_wildcard                                            BigInt                 @default(0)
  task_points                                              BigInt                 @default(0)
  quickloot_fallback                                       Boolean?               @default(false)
  lookmountbody                                            Int                    @default(0) @db.UnsignedTinyInt
  lookmountfeet                                            Int                    @default(0) @db.UnsignedTinyInt
  lookmounthead                                            Int                    @default(0) @db.UnsignedTinyInt
  lookmountlegs                                            Int                    @default(0) @db.UnsignedTinyInt
  lookfamiliarstype                                        Int                    @default(0) @db.UnsignedInt
  isreward                                                 Boolean                @default(true)
  istutorial                                               Boolean                @default(false)
  ismain                                                   Boolean                @default(false)
  forge_dusts                                              BigInt                 @default(0)
  forge_dust_level                                         BigInt                 @default(100)
  randomize_mount                                          Boolean                @default(false)
  boss_points                                              Int                    @default(0)
  created                                                  Int                    @default(0)
  hidden                                                   Boolean                @default(false)
  comment                                                  String                 @db.Text
  account_ban_history                                      account_ban_history[]
  account_bans                                             account_bans[]
  account_vipgrouplist                                     account_vipgrouplist[]
  account_viplist                                          account_viplist[]
  daily_reward_history                                     daily_reward_history[]
  forge_history                                            forge_history[]
  guild_invites                                            guild_invites[]
  guild_membership                                         guild_membership?
  guilds                                                   guilds?
  ip_bans                                                  ip_bans[]
  market_history                                           market_history[]
  market_offers                                            market_offers[]
  player_deaths                                            player_deaths[]
  player_depotitems                                        player_depotitems[]
  player_hirelings                                         player_hirelings[]
  player_inboxitems                                        player_inboxitems[]
  player_items                                             player_items[]
  player_namelocks_player_namelocks_namelocked_byToplayers player_namelocks[]     @relation("player_namelocks_namelocked_byToplayers")
  player_namelocks_player_namelocks_player_idToplayers     player_namelocks?      @relation("player_namelocks_player_idToplayers")
  player_rewards                                           player_rewards[]
  player_spells                                            player_spells[]
  player_storage                                           player_storage[]
  player_wheeldata                                         player_wheeldata?
  accounts                                                 accounts               @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "players_account_fk")
  roulette_plays                                           roulette_plays[]

  @@index([account_id], map: "account_id")
  @@index([vocation], map: "vocation")
}

model players_online {
  player_id Int @id
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model roulette_plays {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  player_id    Int
  uuid         String   @unique(map: "uuid") @db.VarChar(255)
  reward_id    Int
  reward_count Int
  status       Boolean  @default(false)
  created_at   DateTime @default(now()) @db.Timestamp(0)
  updated_at   BigInt   @default(0)
  players      players  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "roulette_plays_ibfk_1")

  @@index([player_id], map: "player_id")
}

model server_config {
  config    String   @id @db.VarChar(50)
  value     String   @default("") @db.VarChar(256)
  timestamp DateTime @default(now()) @db.Timestamp(0)
}

model status {
  id        Int    @id @default(autoincrement()) @db.SmallInt
  status    String @db.Text
  account   String @db.Text
  points    String @db.Text
  codigo    String @db.Text
  chave     String @db.Text
  processed Int    @default(0)
}

model store_history {
  id          Int      @id @default(autoincrement())
  account_id  Int      @db.UnsignedInt
  mode        Int      @default(0) @db.SmallInt
  description String   @db.VarChar(3500)
  coin_type   Boolean  @default(false)
  coin_amount Int
  time        BigInt   @db.UnsignedBigInt
  timestamp   Int      @default(0)
  coins       Int      @default(0)
  accounts    accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "store_history_account_fk")

  @@index([account_id], map: "account_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tile_store {
  house_id Int
  data     Bytes
  id       Int    @id @default(autoincrement())
  houses   houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tile_store_account_fk")

  @@index([house_id], map: "house_id")
}

model towns {
  id   Int    @id @default(autoincrement())
  name String @unique(map: "name") @db.VarChar(255)
  posx Int    @default(0)
  posy Int    @default(0)
  posz Int    @default(0)
}

model z_ots_comunication {
  id        Int    @id @default(autoincrement())
  name      String @default("") @db.VarChar(255)
  type      String @default("") @db.VarChar(255)
  action    String @default("") @db.VarChar(255)
  param1    String @default("") @db.VarChar(255)
  param2    String @default("") @db.VarChar(255)
  param3    String @default("") @db.VarChar(255)
  param4    String @default("") @db.VarChar(255)
  param5    String @default("") @db.VarChar(255)
  param6    String @default("") @db.VarChar(255)
  param7    String @default("") @db.VarChar(255)
  delete_it Int    @default(1)
}

model z_polls {
  id          Int    @id @default(autoincrement())
  question    String @db.VarChar(255)
  description String @db.VarChar(255)
  end         Int    @default(0)
  start       Int    @default(0)
  answers     Int    @default(0)
  votes_all   Int    @default(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model z_polls_answers {
  poll_id   Int
  answer_id Int
  answer    String @db.VarChar(255)
  votes     Int    @default(0)
  id        Int    @id @default(autoincrement())
}

enum ORDER_STATUS {
  PROCESSING
  PENDING
  CANCELED
  DELIVERED
}
